CREATE DATABASE test_db;
\c test_db
CREATE TABLE famous_people (
id SERIAL PRIMARY KEY,
first_name VARCHAR(50),
last_name VARCHAR(50),
birthdate DATE
);
INSERT INTO famous_people (first_name, last_name, birthdate)
  VALUES ('Abraham', 'Lincoln', '1809-02-12');
INSERT INTO famous_people (first_name, last_name, birthdate)
  VALUES ('Mahatma', 'Gandhi', '1869-10-02');
INSERT INTO famous_people (first_name, last_name, birthdate)
  VALUES ('Paul', 'Rudd', '1969-04-06');
INSERT INTO famous_people (first_name, last_name, birthdate)
  VALUES ('Paul', 'Giamatti', '1967-06-06');
SELECT * from famous_people
SELECT * FROM famous_people;
SELECT * FROM famous_people;
SELECT * FROM famous_people;
SELECT * FROM famous_people WHERE birthday > 1920-01-01;
SELECT * FROM famous_people WHERE birthday > '1920-01-01';
SELECT * FROM famous_people WHERE birthdate >= '1920-01-01';
SELECT * FROM famous_people 
WHERE birthdate < '1920-01-01';
SELECT * FROM famous_people 
WHERE first_name =  'Paul';
SELECT COUNT(*) FROM famous_people;
\q
\q
 \i migrations/students_cohorts.sql
\q
CREATE DATABASE bootcampX;
\c bootcampx;
SELET * FROM cohorts
SELECT * FROM cohorts
SELECT * FROM students
mkdir migrations
cd migrations
\i migrations/students_cohorts.sql
\dt
SELECT * FROM students;
SELECT * FROM students;
SELECT * FROM cohorts;
\i seeds/cohorts.sql
\i seeds/students.sql
SELECT count(*) FROM students;
\i  1_students_without_github.sql
\iORDER BY cohort_id;
\i 1_students_without_github.sql
\i 0_selects/1_students_without_github.sql
\i 0_selects/1_students_without_github.sql
\i 1_queries/1_students_in_cohort.sql
\i 1_queries/1_students_in_cohort.sql
\i 1_queries/1_students_in_cohort.sql
\i 1_queries/1_students_in_cohort.sql
\i 1_queries/1_students_in_cohort.sql
\i 1_queries/1_students_in_cohort.sql
\i 1_queries/1_students_in_cohort.sql
\i 1_queries/2_total_students_in_cohort.sql
\i 1_queries/2_total_students_in_cohort.sql
\i 1_queries/2_total_students_in_cohort.sql
\i 1_queries/2_total_students_in_cohort.sql
\i 1_queries/2_total_students_in_cohort.sql
\i 1_queries/2_total_students_in_cohort.sql
\i 1_queries/2_total_students_in_cohort.sql
\i 1_queries/3_contact_details.sql
\i 1_queries/4_non_gmail_students.sql
\i 1_queries/4_non_gmail_students.sql
\i 1_queries/4_non_gmail_students.sql
\i 1_queries/5_currently_enrolled.sql
\i 1_queries/5_currently_enrolled.sql
\i 1_queries/5_currently_enrolled.sql
\i 1_queries/6_github_activity.sql
\i 1_queries/6_github_activity.sql
\i 1_queries/6_github_activity.sql
\i 1_queries/6_github_activity.sql
\i 1_queries/6_github_activity.sql
\i 1_queries/6_github_activity.sql
\q
\i migrations/assignments_submissions.sql
\i migrations/assignments_submissions.sql
\q
\q
\q
\q
\q
CREATE DATABASE test_db
\c test_db
CREATE TABLE users (
id SERIAL PRIMARY KEY NOT NULL,
name VARCHAR(255),
birth_year DATE,
memeber_since DATE
);
CREATE TABLE users (
  id INTEGER PRIMARY KEY, -- number
  name VARCHAR(255), -- string
  birth_year SMALLINT, -- smaller number
  member_since TIMESTAMP -- time stamp
);
\d users
INSERT INTO users (id, birth_year)
VALUES (1, 2019);
SELECT * FROM users;
DROP TABLE IF EXISTS users CASCADE;
CREATE TABLE users (
  id INTEGER PRIMARY KEY NOT NULL,
  name VARCHAR(255) NOT NULL,
  birth_year SMALLINT NOT NULL,
  member_since TIMESTAMP NOT NULL
);
INSERT INTO users (id, birth_year)
VALUES (1, 2019);
INSERT INTO users (id, name, birth_year, member_since)
VALUES (1, 'Susan Hudson', 2000, Now());
SELECT * FROM users
\d users
SELECT * FROM users
ALTER TABLE users
ALTER COLUMN member_since
SET DEFAULT Now();
ALTER TABLE users
ALTER COLUMN member_since
SET DEFAULT Now();
\d users
INSERT INTO users (id, name, birth_year)
VALUES (2, 'Malloy Jenkins', 1000);
DROP TABLE IF EXISTS users CASCADE;
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  birth_year SMALLINT NOT NULL,
  member_since TIMESTAMP NOT NULL DEFAULT Now()
);
INSERT INTO users (name, birth_year)
VALUES ('Susan Hudson', 2000),
('Malloy Jenkins', 1000);
SELECT * FROM users
CREATE TABLE pets (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  owner_id INTEGER NOT NULL REFERENCES users(id)
);
DROP TABLE IF EXISTS pets CASCADE;
CREATE TABLE pets (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  owner_id INTEGER NOT NULL REFERENCES users(id)
);
INSERT INTO pets (name, owner_id)
VALUES ('mittens', 1);
INSERT INTO pets (name, owner_id)
VALUES ('fluffy', 99);
DROP TABLE IF EXISTS pets CASCADE;
CREATE TABLE pets (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  owner_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE
);
INSERT INTO users (name, birth_year) 
VALUES('Jane', 2000)
INSERT INTO users (name, birth_year)
VALUES('Jake', 2001)
INSERT INTO pets (name, owner_id)
VALUES ('puffy', 2);
\i migrations/01_schema.sql
\i migrations/01_schema.sql
\i migrations/01_schema.sql
\i migrations/01_schema.sql
\i migrations/01_schema.sql
\i migrations/01_schema.sql
\i migrations/01_schema.sql
\i migrations/01_schema.sql
\i migrations/01_schema.sql
\i seeds/01_seeds.sql
\i seeds/01_seeds.sql
clear
\i seeds/01_seeds.sql
\dt
 \i seeds/01_seeds.sql
 \i seeds/01_seeds.sql
 \i seeds/01_seeds.sql
 \i migrations/01_schema.sql
 \i seeds/01_seeds.sql
 \i seeds/01_seeds.sql
 \i seeds/02_seeds.sql
 \i 1_queries/01_user_login.sql
 \i 1_queries/02_average_length_of_reservation.sql
 \i 1_queries/02_average_length_of_reservation.sql
 \i 1_queries/03_property_listings_by_city.sql
 \i 1_queries/03_property_listings_by_city.sql
 \i 1_queries/03_property_listings_by_city.sql
 \i 1_queries/03_property_listings_by_city.sql
 \i 1_queries/03_property_listings_by_city.sql
 \i 1_queries/03_property_listings_by_city.sql
 \i 1_queries/03_property_listings_by_city.sql
 \i 1_queries/03_property_listings_by_city.sql
 \i 1_queries/03_property_listings_by_city.sql
 \i 1_queries/03_property_listings_by_city.sql
 \i 1_queries/03_property_listings_by_city.sql
 \i 1_queries/03_property_listings_by_city.sql
 \i 1_queries/03_property_listings_by_city.sql
 \i 1_queries/03_property_listings_by_city.sql
 \i 1_queries/04_most_visited_cities.sql
 \i 1_queries/04_most_visited_cities.sql
 \i 1_queries/04_most_visited_cities.sql
 \i 1_queries/04_most_visited_cities.sql
 \i 1_queries/04_most_visited_cities.sql
 \i 1_queries/05_all_my_reservations.sql
 \i 1_queries/05_all_my_reservations.sql
 \i 1_queries/05_all_my_reservations.sql
 \i 1_queries/05_all_my_reservations.sql
 \i 1_queries/05_all_my_reservations.sql
 \i 1_queries/05_all_my_reservations.sql
 \i 1_queries/05_all_my_reservations.sql
\password
\c lightbnb
\td
\dt
\i migrations/01_schema.sql
\i ../migrations/01_schema.sql
\i ../seeds/02_seeds.sql
\q
\c midterm
npm run db:reset
\q
\c midterm
\dt
\i schema/02_maps.sql
\i db/schema/02_maps.sql
\c midterm
\dt
\i queries/users.db.js
\q
CREATE ROLE labber WITH LOGIN password 'labber';
CREATE DATABASE midterm OWNER labber;
\q
select version()
;
\c midterm
select last_value from maps.sequence_name
;
select currval("maps.sequence.name");
select currval(maps.\q
\c midterm
npm run db:reset
\q
\c midterm
SELECT * FROM pins WHERE map_id = 1;
SELECT * FROM pins;
SELECT * FROM pins;
SELECT * FROM users WHERE user.id = 1;
SELECT * FROM users WHERE users.id = 1;
SELECT * FROM maps WHERE user_id = 1;
\c midterm
select * FROM MAPS
;
\Q
\q
CREATE DATABASE scheduler_development;
\q
\c development
\q
c\ development
\c development
\q
\c development
\q
\c development
\q
\c development
\q
\c development
\q
\c development
\q
\c development
\q
\c development
\q
CREATE DATABASE scheduler_test 
\q
\Q
\q
CREATE DATABASE scheduler_test
CREATE DATABASE scheduler_test;
logout
\q
CREATE DATABASE scheduler_test;
\q
\c scheduler_test
\q
\c development
\q
\c development
\q
\development
\q
\c development
\q
\q
create database ar_exercises;
bundle install
\q
createdb FoodSaver -O labber
;
create database FoodSaver  -O labber
create database FoodSaver  -O labber;
CREATE DATABASE FoodSaver -O labber;
\du
CREATE DATABASE FoodSaver;
\q
\c FoodSaver
SELECT * FROM users
;
SELECT * FROM users;
\db
select * from products
\q
\c foodsaver
\i db/schema/schema.sql
\q
\c foodsaver
\i db/schema/schema.sql
\i db/seeds/seeds.sql
\l
drop database foodsaver
drop database foodsaver;
drop database foodsaver;
\c vagrant
drop database foodsaver;
\q
create database foodsaver;
\q
alter user labber with superuser;
\q
\c foodsaver
\q
\c foodsaver
select * from products
;
select * from products;
\q
\c foodsaver
\q
\s foodsaver
